#+TITLE:     Nix Tour
#+AUTHOR:    Mathis Antony
#+EMAIL:     sveitser@gmail.com
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+LaTeX_CLASS: beamer
#+startup: beamer
#+LaTeX_CLASS_OPTIONS: [presentation]
#+BEAMER_HEADER: \usepackage{minted}
#+LINK_UP:
#+LINK_HOME:

# for syntax highlighting: (setq org-latex-listings 'minted)

* Introduction
** Introduction
- Slides: [[https://github.com/sveitser/nix-tour][github.com/sveitser/nix-tour]]
- =Nix= is a package manager.
- =NixOS= is an operating system.
- =Nix= is the package manager on =NixOS=.
- =Nix= works on linux (including =NixOS=) and macOS.
* Motivation
** Motivation
- Notes from trying to run a machine learning project.
*** phonemizer
- Is not on pypi.
- Can use =git+https://github.com/bootphon/phonemizer=
*** festival
- Segfault with 2.4-3 on arch linux but 2.4-2 works.
- Needs language data, which package to install?
*** pytorch
- Needs v0.1.12 which is very old.
- Despite setting NO_CUDA=1 seems to compile with CUDA support.
- Would require older CUDA version.

* Teaser
** Teaser

#+BEGIN_SRC nix
with import <nixpkgs> { };

python3.withPackages (ps: [
  (ps.pytorchWithCuda.override { cudatoolkit = cudatoolkit_8; })
  ps.ipython
])
#+END_SRC

* More Motivation
** More Motivation
- 1001 forgotten/obsolete/... dependencies.
- The latest and greatest.
- APIs "subject to change yesterday".
- Can anyone run my code?
- Can I run my code in a year?

* Nix Language
** Nix Language
- [[https://nixos.wiki/wiki/Nix_Expression_Language][nixos.wiki/wiki/Nix_Expression_Language]]
- Lazy! (overrideable)
- Run =nix repl=.
- Type =:?= for help.

*** Examples:
#+BEGIN_SRC nix
plus = a: b: a + b
plus 2 3
plus-two = plus 2

[ 1 2 "blah" ]
{ a = 1; b = "hello"; }
/this/is/a/path
"this is a string"
let x = 2; in x + 3
map (x: x * 2) [1 2 3]
#+END_SRC
* Nix Package Manager
** Nix Package Manager
- Download from: [[https://nixos.org/nix][nixos.org/nix]]
- Puts things in =/nix=
- Uses symlinks, wrappers and environment variables.
- Nix packages: [[https://github.com/nixos/nixpkgs][github.com/nixos/nixpkgs]]
- linux, macOS
- binary caches: NixOS, macOS
- =nix search=

* Nix shell
** Nix shell
- Ad hoc: =nix-shell -p cowsay=
#+BEGIN_SRC nix
with import <nixpkgs> { };
mkShell {
  buildInputs = [
    cowsay
  ];
}
#+END_SRC
- Goes into =shell.nix=.
- Activate with =nix-shell=.
* direnv
** direnv
- Per directory "automagic" environment.
- See [[https://direnv.net][direnv.net]]
- Hook into shell =eval "$(direnv hook bash)"=
#+BEGIN_SRC bash
echo 'use nix' > .envrc
direnv allow
#+END_SRC

* Language Specific Package Managers
** Language Specific Package Managers
#+BEGIN_SRC nix
with import <nixpkgs> { };
mkShell {
  buildInputs = [
    python3
    python3Packages.virtualenv
  ];
}
#+END_SRC
- =echo layout_python >> .envrc=

* Wrappers
** Wrappers
- Convenience wrappers for many languages
#+BEGIN_SRC nix
with import <nixpkgs> { };
mkShell {
 buildInputs = [
    (python3.withPackages (ps: [ps.ipython ps.tensorflow]))
    (haskellPackages.ghcWithPackages (ps: [ps.tensorflow ps.tensorflow-ops ps.HUnit]))
  ];
}
#+END_SRC
- Easy to pin =nixpkgs=.
* Pinning of nixpkgs
** Pinning of nixpkgs
- "freeze" *all* packages.
- Pick git commit SHA of =nixpkgs= repo.
- Compute hash: =nix-prefetch-url --unpack https://github.com/nixos/nixpkgs/archive/$SHA.tar.gz=
#+BEGIN_SRC nix
with import (
  builtins.fetchTarball {
    url = "https://github.com/nixos/nixpkgs/archive/0a7e258012b60cbe530a756f09a4f2516786d370.tar.gz";
    sha256 = "1qcnxkqkw7bffyc17mqifcwjfqwbvn0vs0xgxnjvh9w0ssl2s036";
} ) { };
mkShell {
  buildInputs = [
    (python3.withPackages (ps: [ps.ipython ps.pandas]))
  ];
}
#+END_SRC

* Disadvantages
** Disadvantages
- Learning curve.
- Not easily discoverable.
- Some extra storage space.
- (Very rarely) hard to build a package.

* Advantages
** Advantages
- Reproducible.
- Cross platform.
- Works (fails) consistently.
- Fun.
- Totally worth it!

* Thanks
** Thanks
- NixOS: [[https://nixos.org][nixos.org]]
- Dive into nix: [[https://nixos.org/nixos/nix-pills][nixos.org/nixos/nix-pills]]
- Ops with nix: [[https://nixos.org/nixops][nixos.org/nixops]]
- Slides: [[https://github.com/sveitser/nix-tour][github.com/sveitser/nix-tour]]
- My NixOS config: [[https://github.com/sveitser/nixconfig][github.com/sveitser/nixconfig]]
- Thanks!
